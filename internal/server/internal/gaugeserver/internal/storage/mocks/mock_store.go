// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/internal/gaugeserver/internal/storage/interface.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	shared "github.com/oktavarium/go-gauger/internal/shared"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// BatchUpdate mocks base method.
func (m *MockStorage) BatchUpdate(arg0 context.Context, arg1 []shared.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdate indicates an expected call of BatchUpdate.
func (mr *MockStorageMockRecorder) BatchUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdate", reflect.TypeOf((*MockStorage)(nil).BatchUpdate), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockStorage) GetAll(arg0 context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStorageMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStorage)(nil).GetAll), arg0)
}

// GetCounter mocks base method.
func (m *MockStorage) GetCounter(arg0 context.Context, arg1 string) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockStorageMockRecorder) GetCounter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockStorage)(nil).GetCounter), arg0, arg1)
}

// GetGauger mocks base method.
func (m *MockStorage) GetGauger(arg0 context.Context, arg1 string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauger", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGauger indicates an expected call of GetGauger.
func (mr *MockStorageMockRecorder) GetGauger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauger", reflect.TypeOf((*MockStorage)(nil).GetGauger), arg0, arg1)
}

// Ping mocks base method.
func (m *MockStorage) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorage)(nil).Ping), arg0)
}

// SaveGauge mocks base method.
func (m *MockStorage) SaveGauge(arg0 context.Context, arg1 string, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveGauge", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveGauge indicates an expected call of SaveGauge.
func (mr *MockStorageMockRecorder) SaveGauge(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGauge", reflect.TypeOf((*MockStorage)(nil).SaveGauge), arg0, arg1, arg2)
}

// UpdateCounter mocks base method.
func (m *MockStorage) UpdateCounter(arg0 context.Context, arg1 string, arg2 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockStorageMockRecorder) UpdateCounter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockStorage)(nil).UpdateCounter), arg0, arg1, arg2)
}
