// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: gauger.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gauger_GetAll_FullMethodName  = "/api.Gauger/GetAll"
	Gauger_Get_FullMethodName     = "/api.Gauger/Get"
	Gauger_Update_FullMethodName  = "/api.Gauger/Update"
	Gauger_Updates_FullMethodName = "/api.Gauger/Updates"
)

// GaugerClient is the client API for Gauger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GaugerClient interface {
	GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Updates(ctx context.Context, in *UpdatesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gaugerClient struct {
	cc grpc.ClientConnInterface
}

func NewGaugerClient(cc grpc.ClientConnInterface) GaugerClient {
	return &gaugerClient{cc}
}

func (c *gaugerClient) GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, Gauger_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaugerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, Gauger_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaugerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gauger_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaugerClient) Updates(ctx context.Context, in *UpdatesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gauger_Updates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GaugerServer is the server API for Gauger service.
// All implementations must embed UnimplementedGaugerServer
// for forward compatibility
type GaugerServer interface {
	GetAll(context.Context, *emptypb.Empty) (*GetAllResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Update(context.Context, *UpdateRequest) (*emptypb.Empty, error)
	Updates(context.Context, *UpdatesRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGaugerServer()
}

// UnimplementedGaugerServer must be embedded to have forward compatible implementations.
type UnimplementedGaugerServer struct {
}

func (UnimplementedGaugerServer) GetAll(context.Context, *emptypb.Empty) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedGaugerServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGaugerServer) Update(context.Context, *UpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGaugerServer) Updates(context.Context, *UpdatesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updates not implemented")
}
func (UnimplementedGaugerServer) mustEmbedUnimplementedGaugerServer() {}

// UnsafeGaugerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GaugerServer will
// result in compilation errors.
type UnsafeGaugerServer interface {
	mustEmbedUnimplementedGaugerServer()
}

func RegisterGaugerServer(s grpc.ServiceRegistrar, srv GaugerServer) {
	s.RegisterService(&Gauger_ServiceDesc, srv)
}

func _Gauger_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaugerServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gauger_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaugerServer).GetAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gauger_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaugerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gauger_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaugerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gauger_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaugerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gauger_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaugerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gauger_Updates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaugerServer).Updates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gauger_Updates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaugerServer).Updates(ctx, req.(*UpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gauger_ServiceDesc is the grpc.ServiceDesc for Gauger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gauger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Gauger",
	HandlerType: (*GaugerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _Gauger_GetAll_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Gauger_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Gauger_Update_Handler,
		},
		{
			MethodName: "Updates",
			Handler:    _Gauger_Updates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gauger.proto",
}
